pipeline {
    agent {
        docker {
            image 'node' 
            args '-p 5000:5000' 
        }
    }
    stages {
       
        stage('build') {
                steps { 
                    dir("Backend") {

                        sh 'npm install'
                    }
             }
        }
        
          stage('Test') {
                 steps {
                     dir("Backend") {
                      
                    
                    
                    sh 'npm run test'
                 }
            }
        }

    
    post {
      failure {
          mail to: 'alexakr3@ac.sce.ac.il',
              subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
              body: "Something is wrong with ${env.BUILD_URL}"
              
    } 
    always {
          publishHTML target: [
            allowMissing         : false,
            alwaysLinkToLastBuild: false,
            keepAll             : true,
            reportDir            : 'output/coverage/jest',
            reportFiles          : 'index.html',
            reportName           : 'Test Report'
          ]
        }
}


   stage('Deploy') {
      when {
        expression {
          currentBuild.result == null || currentBuild.result == 'SUCCESS'
        }
      }
      steps {
        script {
          def server = Artifactory.server 'My_Artifactory'
          uploadArtifact(server)
        }
      }
    }
  }
}
def uploadArtifact(server) {
  def uploadSpec = """{
            "files": [
              {
                "pattern": "continuous-test-code-coverage-guide*.tgz",
                "target": "npm-stable/"
              }
           ]
          }"""
  server.upload(uploadSpec)
def buildInfo = Artifactory.newBuildInfo()
  server.upload spec: uploadSpec, buildInfo: buildInfo
  server.publishBuildInfo buildInfo
}
